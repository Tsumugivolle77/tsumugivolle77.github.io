<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Golden Hours</title>
  
  <subtitle>眩しさだけわ、忘れなかった</subtitle>
  <link href="https://tsumugivolle77.github.io/atom.xml" rel="self"/>
  
  <link href="https://tsumugivolle77.github.io/"/>
  <updated>2025-02-07T12:23:48.903Z</updated>
  <id>https://tsumugivolle77.github.io/</id>
  
  <author>
    <name>Offensive 77</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mmd lec review</title>
    <link href="https://tsumugivolle77.github.io/2025/02/02/mmd-lec-review/"/>
    <id>https://tsumugivolle77.github.io/2025/02/02/mmd-lec-review/</id>
    <published>2025-02-02T08:57:33.000Z</published>
    <updated>2025-02-07T12:23:48.903Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1><span id="mmd_lec_review">mmd_lec_review</span></h1><h2><span id="lec-1">Lec 1</span></h2><ul><li>Utility Matrix</li><li>User-User Collabrative Filter (CF)<ul><li>Avg of k existing ratings (Basic): sum of r/k</li><li>Weighted Avg of ratings with Cosine Similarity</li><li>Considering Bias (Avg of user ratings + weighted avg of (<strong>unbiased user ratings</strong>))</li></ul></li><li>Cosine Similarity</li></ul><h2><span id="lec-2-3">Lec 2 3</span></h2><ul><li>Scale-Aware Algorithm: reduce storage occupation. rated_by, user_col -&gt; utility matrix</li><li>Content-Based <strong>Recommendation</strong>: User top k favs -&gt; item similar to these top k</li><li>Item Profile: Vec. e.g. A film = (hasSomeActor?(0|1)/hasSomeDirector?(0|1)/RatingsFromOtherMovieDBs(Floating))</li><li>User Profile: weighted sum of item profiles. the weight is the rating of that item</li><li>Predication Heuristic/User-Item Similarity: cosine similarity of <em>u</em> and <em>i</em>, how close are Vec u and Vec i in k-dim vector space</li><li>Content-Based ++ CF: utility matrix as product of 2 matrices P, Q^T</li><li>Improve Estimation: Latent Factor Models, gradient descending</li><li>Overfitting: fit to irrelevant details</li><li>Regularization: to solve overfitting<ul><li>Scarce Model: data quality low -&gt; without too many details (zero entries big in quantity)<ul><li>Squared Norm to Measure “number of zeros”: norm = sq1 + sq2 + … + sqn</li></ul></li><li>Rich Model: data quantity large</li><li>Minimize error + nonzero</li><li>Ppl. with scarce ratings will become “neutral” or near 0 in the k-dim space</li></ul></li><li>Gradient Descent vs. Stochastic GD<ul><li>GD: move on all directions one time</li><li>SGD: move at one direction at a time, for all directions</li></ul></li><li>JAX<ul><li>loss function: the function that defines error</li><li>learning rate: a scalar for regulating the step length</li><li>grad_loss = jax.grad(loss): gradient of loss function</li><li>toy GD: p - lr * grad_loss(p, train_dataset)</li></ul></li></ul><h2><span id="lec-4">Lec 4</span></h2><ul><li>PySpark<ul><li>HDFS: Hadoop Distributed Filesystem</li><li>RDD: Resilient Distributed Dataset</li><li>SparkContext: sc = spark.parallelize([1, 2, 3])</li><li>Reduce<br><img src="/images/mmd_lec_review/QQ_1738575166219.png" alt="alt text"></li></ul></li></ul><h2><span id="lec-5">Lec 5</span></h2><ul><li>Are elements of a stream in a given set of keys <code>S</code>?<ul><li>create hash table <code>B</code> [0, n), set all 0;</li><li>hash <code>s</code> in <code>S</code> to the table, set <code>B[h(s)]</code> 1;</li><li>reading <code>a</code> from stream, if <code>B[h(a)]</code> == 1, output <code>a</code>;</li><li>This could create <strong>false positive</strong> (even if not in <code>S</code>, we could output it);</li><li>false positive probability: 1-e^(-m/n).</li></ul></li><li>Bloom Filter: Improved version<ul><li>have <code>k</code> hashmaps, map entry <code>h_i(s)</code> in <code>B</code> as 1;</li><li>if all <code>h_i(a)</code> are 1 in the hashtable, output <code>a</code>;</li><li>optimal value of <code>k</code> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.779ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6090.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(1100,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2144.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"/></g><g data-mml-node="mo" transform="translate(2978.7,0)"><path data-c="2061" d=""/></g><g data-mml-node="mo" transform="translate(2978.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(3367.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(3867.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(4534.4,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"/></g><g data-mml-node="mn" transform="translate(5590.2,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"/></g></g></g></svg></mjx-container> by calc derivatives;</li><li>false positive probability: (1-e^(-km/n))^k;</li><li>one big B (size=n) &gt; k small B (size=n/k) since it’s simpler.</li></ul></li><li>Batch vs. Stream<ul><li>Batch: do not require instant feedback, fixed size of input</li><li>Stream: consistent input (live data), instant feedback (iostream)</li></ul></li><li><strong>Sample queries from a stream</strong><ul><li>Sample the queries made by a user as a whole (accept all or discard all)</li><li>use hash table to judge if we want these queries result<ul><li>say, we want 30% of the results, then we set up a hash table of size 10. if some of the key of the queries are mapped into the first 3 entries we accept all of them (the queries by the user).</li></ul></li></ul></li></ul><h1><span id="lec-6">Lec 6</span></h1><ul><li>Flajolet-Martin: Estimate number of distinct elements in a stream<ul><li>input a;</li><li>set up hash table of size <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g></g></g></svg></mjx-container>;</li><li>get the binary representation (at least of length <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.273ex" height="1.57ex" role="img" focusable="false" viewbox="0 -694 1888.7 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"/></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""/></g><g data-mml-node="mi" transform="translate(1000.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g></g></g></svg></mjx-container>) of h(a), compute the position of the first 1 seen from right (number of trailing 0s) as r(a);</li><li>record <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.333ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6335.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="munder" transform="translate(2092.6,0)"><g data-mml-node="mo"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833,0)"/><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333,0)"/></g><g data-mml-node="mi" transform="translate(1894,-150) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g><g data-mml-node="mi" transform="translate(4577.3,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(5028.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5417.3,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(5946.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>;</li><li>The estimated number of distinct elements is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.533ex" height="1.914ex" role="img" focusable="false" viewbox="0 -846 1119.7 846"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g></g></g></g></svg></mjx-container>.<ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.535ex" height="2.32ex" role="img" focusable="false" viewbox="0 -775.2 4656.3 1025.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(1111.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msup" transform="translate(2111.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="msup" transform="translate(3563.5,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> tends to 1 for m &lt;&lt; 2^r, 0 for m &gt;&gt; 2^r, so m will around 2^R</li><li>to improve accuracy we can have several hash functions, take the avg of their results.</li></ul></li><li>Moment<ul><li>value i appears m_i times in the stream</li><li>k-th moment is defined as sum of (m_i)^k</li><li>0-th moment: count of distinct elements</li><li>1-th moment: length of stream</li><li>2-th moment: <strong>surprise number</strong>, measure of how <strong>uneven</strong> the numbers are<ul><li>minimized when all elements are of equal appearance count</li></ul></li></ul></li><li>AMS Method<ul><li>counting from <code>t</code>, elem at <code>t</code> is X.el, count of X.el from t on is X.val = c</li><li>estimate the second moment as S = n(2c-1)</li><li>if we have several Xs, S = 1/k sum of n(2c_k-1)</li><li>the <strong>expectation</strong> of <code>f(X) = n(2c_t-1)</code> is the second moment (<code>c_t</code> is the count of elem at <code>t</code> from <code>t</code> on)</li><li>estimate k-th moment: n(c^k - (c-1)^k)</li><li>However, stream never ends<ul><li>store n separately</li><li>store k counts, k variables</li><li>as new element comes, select it with k/n probability<ul><li>if selected, remove one of the k previously selected</li></ul></li></ul></li></ul></li></ul></li></ul><h1><span id="lec-7">Lec 7</span></h1><p>How to find dup elems?</p><ul><li>Locality Sensitive Hash<ul><li>map high dim elem -&gt; buckets</li><li>compare in each buckets by similarity metrics (cos?/jaccard?)</li></ul></li><li>Problem: <ul><li>Given: high dim obj like image + distance function</li><li>Goal: find all pairs of objs with dist &lt;= threshold</li></ul></li><li>Jaccard similarity/distance of two sets:<ul><li>sim: size of intersect / size of union</li><li>dist: 1 - sim</li></ul></li><li>Find similar docs:<ul><li>Shingling: doc -&gt; set</li><li>Min-Hashing: set -&gt; signature</li><li>LSH: find (likely) similar docs by their signature</li><li>Final filtering: candidate docs -&gt; really similar docs (by pairwise comparison)</li></ul></li><li>k-shingle: all possible tokens of length k from doc<ul><li>doc = abcab, 2 shingle = {ab, bc, ca} or {ab..ab} with multiset</li><li>doc can be defined as a 0/1 vector in the space of k-shingles</li><li>jaccard sim(D_1, D_2)</li><li>docs have lot of shingles in common are similar</li><li>pick k large enough</li></ul></li><li>Min-Hashing: set as signature (0/1 vector)<ul><li>hash member of the set into a set of numbers, take the smallest number as minhash</li><li>use Monte-Carlo (simulation) to compute Pr[h(C_1)==h(C_2)]</li></ul></li></ul><h1><span id="lec-8">Lec 8</span></h1><ul><li>LSH<ul><li>divide signature matrix into b bands r rows</li><li>find the best params s, b, r, to balance false positive/false negative rate</li></ul></li></ul><h1><span id="lec-9">Lec 9</span></h1><p>Association Rule Discovery</p><ul><li>item, basket</li><li>what kind of items will be bought in combination?</li><li>support of {items…} := frequency of {items…} appear in all baskets</li><li>Association Rule: {items…} -&gt; {other items…}. If… then…</li><li>confidence of rule: conf(I -&gt; J) = supp(I union J) / supp(I)</li><li>interest of rule: interest(I -&gt; J) = conf(I -&gt; J) - Pr[J], Pr[J] := probability that J is contained in a basket. rule with interest that is high (either pos or neg) is interesting.</li><li>Problem: find ass. rules with supp &gt;= s, conf &gt;= c<ul><li>Find frequent pairs<ul><li>A-Priori Algorithm: find frequent items (freq &gt;= s) -&gt; extend frequent items into pairs</li><li>PCY Multistage: 3 Passes, 2 indep hashes</li><li>PCY Multihash: 2 Passes, 2 indep hashes</li></ul></li></ul></li></ul><h1><span id="lec-10">Lec 10</span></h1><p>Web<br>2 Problems:</p><ol><li>Web whitelist/blacklist</li><li>Rank queries</li></ol><h2><span id="link-analysis">Link Analysis</span></h2><ul><li>Page Rank</li><li>Topic-Specific Page Rank (list S of pages for some topic, e.g. sports)</li><li>Web Spam Detection</li></ul><h3><span id="page-rank">Page Rank</span></h3><p>Problems:</p><ul><li>Dead End</li><li>Spider Trap<br>Solution:<br>Teleport</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewbox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"/></g></g></g></svg></mjx-container> tp</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.177ex" height="2.034ex" role="img" focusable="false" viewbox="0 -705 2288.4 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"/></g></g></g></svg></mjx-container> not tp<br>Do not compute the tp matrix since it’s dense everywhere.</li></ul><h1><span id="lec-11">Lec 11</span></h1><p>Spam Farming</p><ul><li>inaccessible</li><li>accessible (comment block etc.) link to owned</li><li>owned (link to owned itself and accessible to increase their weights)<br><img src="/images/mmd_lec_review/link_farming.png" alt="alt text"></li></ul><p>Measure against Spam Farming<br>TrustRank (Topic-Specific Page Rank with a Trusted Page List)</p><ul><li>seed set, and an oracle (a human etc.) to tell if the page in the set is:<ul><li>good pages (rarely point to bad page)</li><li>bad pages</li></ul></li><li>Add good pages to teleport set</li><li>each page gets a trust val from 0 to 1<ul><li>option 1: set a threshold, if page.trust_val &lt; threshold, page is spam</li><li>option 2: r_p := page rank, r_p+ := page rank of p with tp into trusted pages only, r_p- := r_p - r_p+, spam mass p := r_p- / r_p. If p high =&gt; spam</li></ul></li><li>How to choose seed set?<ul><li>set with high PageRank</li><li>set with highly trusted top-level domain</li></ul></li></ul><h1><span id="lec-12">Lec 12</span></h1><p>Web Advertising</p><ul><li>Matching Algorithm<ul><li>Greedy Algorithm (How good?)<ul><li>Competitive Rate: min |M_greedy|/|M_opt|</li></ul></li><li>G := girls matched in opt but not in greedy</li><li>|G| + |M_greedy| == |M_opt|</li><li>|G| &lt;= |B| &lt;= |M_greedy|</li><li>…</li><li>CR &gt;= 1/2</li></ul></li></ul><p>Adwords Problem:<br>(Advertiser, Bid, CTR, Expected revenue := Bid * CTR)</p><p>Complications:</p><ul><li>Budget</li><li>unknown CTR</li></ul><p>Geedy: CR can be low in worst case (1/2 the worst case)</p><p>BALANCE Algorithm: choose the advertiser with highest unspent budget</p><p>CR &gt;= 1-1/e approx. 0.63</p><p>Generalized BALANCE:</p><p>Bid = x_i, Budget = b_i, Amount spent so far = m_i,<br>Fraction of unspent f_i = 1 - b_i/m_i<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.264ex" height="2.515ex" role="img" focusable="false" viewbox="0 -861.5 9398.7 1111.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="msub" transform="translate(1079,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(1751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2140,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(2600,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3266.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(4322.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(5221.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(5610.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(6332.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msup" transform="translate(7332.9,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(778,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(9009.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;[object Object]&quot; class=&quot;aplaye</summary>
      
    
    
    
    <category term="review" scheme="https://tsumugivolle77.github.io/categories/review/"/>
    
    
    <category term="not-suitbale-for-read" scheme="https://tsumugivolle77.github.io/tags/not-suitbale-for-read/"/>
    
  </entry>
  
  <entry>
    <title>Properties of Arnoldi process for skew symmetric matrices</title>
    <link href="https://tsumugivolle77.github.io/2024/12/18/Properties-of-Arnoldi-process-for-skew-symmetric-matrices/"/>
    <id>https://tsumugivolle77.github.io/2024/12/18/Properties-of-Arnoldi-process-for-skew-symmetric-matrices/</id>
    <published>2024-12-17T17:10:21.000Z</published>
    <updated>2024-12-17T17:13:42.371Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2><span id="question">Question</span></h2><p><img src="/images/arnoldi_process/QQ_1734455471666.png" alt="alt text"></p><h2><span id="solution-incomplete">Solution (incomplete)</span></h2><p><img src="/images/arnoldi_process/QQ_1734455553573.png" alt="alt text"><br><img src="/images/arnoldi_process/image.png" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;[object Object]&quot; class=&quot;aplaye</summary>
      
    
    
    
    <category term="maths" scheme="https://tsumugivolle77.github.io/categories/maths/"/>
    
    
    <category term="Numerical Linear Algebra" scheme="https://tsumugivolle77.github.io/tags/Numerical-Linear-Algebra/"/>
    
  </entry>
  
  <entry>
    <title>A Review on Statistics: MLE and MAP</title>
    <link href="https://tsumugivolle77.github.io/2024/12/15/A-Review-on-Statistics-MLE-and-MAP/"/>
    <id>https://tsumugivolle77.github.io/2024/12/15/A-Review-on-Statistics-MLE-and-MAP/</id>
    <published>2024-12-15T11:12:33.000Z</published>
    <updated>2024-12-15T11:15:02.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>See in the link below:<br><a href="https://typst.app/project/royUtokLoPUm9JT0unrV47">https://typst.app/project/royUtokLoPUm9JT0unrV47</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;[object Object]&quot; class=&quot;aplaye</summary>
      
    
    
    
    <category term="maths" scheme="https://tsumugivolle77.github.io/categories/maths/"/>
    
    
    <category term="Numerical Optimization" scheme="https://tsumugivolle77.github.io/tags/Numerical-Optimization/"/>
    
    <category term="Statistics" scheme="https://tsumugivolle77.github.io/tags/Statistics/"/>
    
  </entry>
  
  <entry>
    <title>NODE Übungsmenü</title>
    <link href="https://tsumugivolle77.github.io/2024/12/04/Prove-Trumpet-Bound/"/>
    <id>https://tsumugivolle77.github.io/2024/12/04/Prove-Trumpet-Bound/</id>
    <published>2024-12-03T21:47:39.000Z</published>
    <updated>2024-12-04T19:02:44.039Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2><span id="grönwall-inequality">Grönwall inequality</span></h2><p><img src="/images/trumpet_bound/QQ_1733338929744.png" alt="alt text"></p><h2><span id="question-0">Question 0</span></h2><p><img src="/images/trumpet_bound/QQ_1733262696794.png" alt="alt text"></p><h2><span id="proof-0">Proof 0</span></h2><p><img src="/images/trumpet_bound/QQ_1733262613332.png" alt="alt text"></p><h2><span id="question-1">Question 1</span></h2><p><img src="/images/trumpet_bound/QQ_1733338958588.png" alt="alt text"></p><h2><span id="proof-1">Proof 1</span></h2><p><img src="/images/trumpet_bound/image.png" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;[object Object]&quot; class=&quot;aplaye</summary>
      
    
    
    
    <category term="maths" scheme="https://tsumugivolle77.github.io/categories/maths/"/>
    
    
    <category term="Numerical Optimization" scheme="https://tsumugivolle77.github.io/tags/Numerical-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>Literarische Quotationen</title>
    <link href="https://tsumugivolle77.github.io/2024/12/01/Zitate-von-1984/"/>
    <id>https://tsumugivolle77.github.io/2024/12/01/Zitate-von-1984/</id>
    <published>2024-12-01T13:30:17.000Z</published>
    <updated>2025-03-06T09:33:40.884Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Nun war er im Begriff, ein Tagebuch anzufangen. Das war nicht illegal (<strong>nichts war illegal, da es keine Gesetze gab</strong>), aber im Fall der Entdeckung war es ziemlich sicher, dass man dafür mit dem Tod oder wenigstens fünfundzwanzig Jahren Arbeitslager bestraft würde.</p><hr><p>Mit diesen Kindern, dachte er, muss die arme Frau <em>ein Leben ständigen Schrecken führen</em>. Noch ein Jahr oder zwei, dann würde sie von ihnen Tag und Nacht auf <em>Anzeichen von Unorthodoxie</em> beobachtet. Heutzutage waren fast alle Kinder furchtbar. Am schlimmsten war, dass Organisationen wie die Spione sie systematisch zu unkontrollierbaren kleinen Wilden machten, was bei ihnen aber keinerlei Hang zur Rebellion gegen die Partei und alles, was damit zusammenhing. Die Lieder, die Aufmärsche, die Fahnen, das Wandern, der Drill mit Holzgewehren, das Brüllen von Slogans, die Anbetung des Großen Bruders - das alles war für sie eine Art großartigen Spiels. <em>Ihre ganze Wildheit wurde nach außen gelenkt, gegen Staatsfeinde, Ausländer, Verräter, Saboteure, Gedankenverbrecher.</em> Es war beinahe normal, dass Leute über dreißig sich vor den eigenen Kindern fürchteten.</p><hr><p>«Wir werden uns an dem Ort treffen, an dem es keine Dunkelheit gibt.»</p><hr><p>Unten auf der Straße ließ der Wind das abgerissene Plakat hin und her flappen, und das Wort ENGSOZ erschien und verschwand stoßweise. Engsoz. Die heiligen Grundsätze von Engsoz. <em>Neusprech, Doppeldenk, Veränderbarkeit der Vergangenheit</em>. <strong>Er fühlte sich, als ginge er durch Wälder am Meeresgrund, verloren in einer monströsen Welt, in der er selbst das Monster war. Die Vergangenheit war tot, die Zukunft ist unvorstellbar. Welche Gewissheit hat er denn, dass auch nur ein einzigerjetzt lebender Mensch auf seiner Seite war? Und wie konnte er wissen, ob die Herrschaft der Partei nicht ewig dauern würde?</strong> Wie eine Antwort kamen ihm die drei Slogans auf der weißen Fassade des Ministeriums der Wahrheit in den Sinn:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KRIEG IST FRIEDE</span><br><span class="line">FREIHEIT IST KNECHTSCHAFT</span><br><span class="line">UNWISSEN IST STÄRKE</span><br></pre></td></tr></table></figure><hr><p>Aus dem Abgrund des Grauens, in dem wir heute halb blind herumtasten mit verstörter und zerbrochener Seele, blicke ich immer wieder auf zu jenen alten Sternbildern, die über meiner Kindheit glänzten, und tröste mich mit dem ererbten Vertrauen, daß dieser Rückfall dereinst nur als ein Intervall erscheinen wird in dem ewigen Rhythmus des Voran und Voran.</p><hr><p>Aber nur die sogenannte ›akademische‹ Bildung, die zur Universität führte, verlieh in jenen Zeiten des ›aufgeklärten‹ Liberalismus vollen Wert; darum gehörte es zum Ehrgeiz jeder ›guten‹ Familie, daß wenigstens einer ihrer Söhne vor dem Namen irgendeinen Doktortitel trug.</p><hr><p>Und der einzige wirklich beschwingte Glücksmoment, den ich der Schule zu danken habe, wurde der Tag, da ich ihre Tür für immer hinter mir zuschlug.</p><hr><p><strong>Noch als Gymnasiast wurde uns, wenn wir eine schlechte Note in irgendeinem nebansächlichen Gegenstand nach Hause brachten, gedroht, man werde uns aus der Schule nehmen und ein Handwerk lernen lassen - die schlimmste Drohung, die es in der bürgerlichen Welt gab: Rückfall ins Proletariat -</strong>, und wenn junge Menschen im ehrlichsten Bildungsverlangen bei Erwachsenen Aufklärung über ernste zeitliche Probleme suchten, wurden sie abgekanzelt mit dem hochmütigen »Das verstehst du noch nicht«.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;[object Object]&quot; class=&quot;aplaye</summary>
      
    
    
    
    <category term="literature" scheme="https://tsumugivolle77.github.io/categories/literature/"/>
    
    
    <category term="1984" scheme="https://tsumugivolle77.github.io/tags/1984/"/>
    
    <category term="Welt von Gestern" scheme="https://tsumugivolle77.github.io/tags/Welt-von-Gestern/"/>
    
  </entry>
  
  <entry>
    <title>IVP Sensitivity Matrices: Properties</title>
    <link href="https://tsumugivolle77.github.io/2024/11/19/IVP-Sensitivity-Matrices-Properties/"/>
    <id>https://tsumugivolle77.github.io/2024/11/19/IVP-Sensitivity-Matrices-Properties/</id>
    <published>2024-11-19T12:26:11.000Z</published>
    <updated>2024-11-19T12:57:03.245Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="/images/IVP_Sensitivity/QQ_1732019135862.png" alt="alt text"><br><img src="/images/IVP_Sensitivity/QQ_1732019284142.png" alt="alt text"><br>All the other properties are easy to show, except a notable one (g).</p><p>The proof is given above:<br><img src="/images/IVP_Sensitivity/QQ_1732019391013.png" alt="alt text"><br>this is given by applying the chain rule.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;[object Object]&quot; class=&quot;aplaye</summary>
      
    
    
    
    <category term="maths" scheme="https://tsumugivolle77.github.io/categories/maths/"/>
    
    
    <category term="Numerical Optimization" scheme="https://tsumugivolle77.github.io/tags/Numerical-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>Heidelberg Bird Observation</title>
    <link href="https://tsumugivolle77.github.io/2024/11/16/Heidelberg-Bird-Observation/"/>
    <id>https://tsumugivolle77.github.io/2024/11/16/Heidelberg-Bird-Observation/</id>
    <published>2024-11-15T22:53:19.000Z</published>
    <updated>2024-11-20T20:43:49.535Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2><span id="black-headed-gull">Black-Headed Gull</span></h2><p><img src="/images/life-in-germany/AFE2CFC6EEAEED7A0A46AB02C479DD66.jpg" alt="alt text"><br><img src="/images/life-in-germany/BF504CAFC6BE288F5E45B93C1C563248.jpg" alt="alt text"></p><h2><span id="swan">Swan</span></h2><p><img src="/images/life-in-germany/3C3B2C44B07531FD30F2F6EB62F62FD3.jpg" alt="alt text"></p><h2><span id="crow">Crow</span></h2><p><img src="/images/life-in-germany/B8379A028FCB47E7A11CB59BCE7EA847.jpg" alt="alt text"><br><img src="/images/life-in-germany/EE17E651FA005A15AA9BEF8DF720FFFF.jpg" alt="alt text"></p><h2><span id="egyptian-goose">Egyptian Goose</span></h2><p><img src="/images/life-in-germany/0A8CADCAA1DDE3BB418E35C252944A3F.jpg" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;[object Object]&quot; class=&quot;aplaye</summary>
      
    
    
    
    <category term="life records" scheme="https://tsumugivolle77.github.io/categories/life-records/"/>
    
    
    <category term="Deutschland" scheme="https://tsumugivolle77.github.io/tags/Deutschland/"/>
    
    <category term="life" scheme="https://tsumugivolle77.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Life in Germany: Prologue</title>
    <link href="https://tsumugivolle77.github.io/2024/11/05/Life-in-Germany-Prologue/"/>
    <id>https://tsumugivolle77.github.io/2024/11/05/Life-in-Germany-Prologue/</id>
    <published>2024-11-05T01:26:24.000Z</published>
    <updated>2024-11-20T20:48:06.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2><span id="first-challenge-german-visa">First Challenge: German Visa</span></h2><p>Well, I waited exatly 2 months until I received it (from 2. Sep. to 2. Nov.). Quite slow ja.<br>I expected to celebrate Halloween (for the very first time) in Germany but that did not come true. :(</p><p>Ok, part of the reasons for being so late are on me, this July I spent my Summer holiday in Japan. Hence, I started to make preparations until August. However, visiting Torishirojima has the highest priority in my heart than any other things. Plus, a period of 2 months is way too long under any circumstances and in any country. Unacceptable man.</p><p>Verdammt, Bundesamt für Auswärtige Angelegenheiten, FICK DICH.<br><img src="/images/life-in-germany/IMG_20241102_150231.jpg" alt="alt text"></p><p>­The following parts of this article would be updated in the next days.</p><h2><span id="day-1-shanghai-gt-frankfurt-am-main">Day 1: Shanghai -&gt; Frankfurt am Main</span></h2><p>I arrived at Flughafen Frankfurt (FRA) after 14 hours of airtrip. Frankfurt is not as “big” as I imagined before. Yeah, It’s not that modern and shocking when you put it with Shanghai or Tokyo, at the very first glance. But the goods price here is quite big. I bought a coke and a choco with 2,5€ for both at a shop near Frankfurt train station. (They would cost ca. 1,5€ in Germany as usual.)</p><p>I only stay here for one night. No time for further exploration.</p><h2><span id="day-2-frankfurt-am-main-gt-heidelberg">Day 2: Frankfurt am Main -&gt; Heidelberg</span></h2><p>I ordered a Ride on FreeNow on the second morning with ca. 110€ and go to have a look at the apartment I will move in, at Im Eichwald, Heidelberg. Well, it’s not even fully furnished. I would stay in the nearby hotel for a week. Unlucky again :(.<br><img src="/images/life-in-germany/IMG_20241107_085150.jpg" alt="Near Frankfurt Train Station"><br><img src="/images/life-in-germany/IMG_20241107_100622.jpg" alt="Im Eichwald"></p><p>After that, I went down the steep hill roads to have my first glance at Heidelberg Alte Brücke. It was a quite long way down there with several catholic churchs scatter on it. I also see for the first time the trains running on the same roads with cars.<br><img src="/images/life-in-germany/IMG_20241107_155525.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241107_162334.jpg" alt="alt text"></p><p>With feet you will need over 1 hour to get to that site. However, the awesome landscape alongside River Neckar worths all the tiredness and efforts. The Winter sky in Germany is said to be always cloudy (at least for this day, all day long). But I can clearly imagine how gourgeous it would look like in Spring or Summer.<br><img src="/images/life-in-germany/IMG_20241107_164348.jpg" alt="Neckar River"><br><img src="/images/life-in-germany/IMG_20241107_165304.jpg" alt="Studentmensa"><br><img src="/images/life-in-germany/IMG_20241107_170405.jpg" alt="Alte Brücke"><br><img src="/images/life-in-germany/IMG_20241107_170708.jpg" alt="Heidelberg Schloss maybe"></p><p>I also tasted the food in the students’ restaurant. It’s not bad (day 5 edit: no it’s bad, you would not like to eat it all the year). It’s just so strange and “eatable” to a minimum anyway.<br><img src="/images/life-in-germany/IMG_20241107_172856.jpg" alt="Essen von Cthulhu"></p><p>The way back to Im Eichwald was a nightware: OVER 30 degree rampway starting from Rohrbach to Im Eichwald. There’s also a graveyard on the way. I realized then, life here without a bicyclec (day 5 edit: without public transport) will be a big challenge and no joke, I will become a top athelete before I graduate from Uni Heidelberg. :) Besides, I also find other problems already. I must solve them asap and yeah the most important, buy a bicycle tomorrow.</p><p>So tired and so much for this day.. Gute Nacht.</p><h2><span id="day-4-relish-the-moment-alongside-the-neckar-river">Day 4: Relish the Moment alongside the Neckar River</span></h2><p>This day was the first Saturday since I’d been here. And the first day of sun. Good weather always give man good moods. I managed to fix some problem (with my Chinese SIM Card) last night. There’re still many things undone.</p><p>In the morning I ride down the countryroad to Kaufland and DM to get a German phone number (the fellow students recommended me to buy a prepaid Vodafone CallYa SIM Card) and to buy some life necessities. On the way here and there I encountered a big school of pigeons, so cute.<br><img src="/images/life-in-germany/IMG_20241109_084929.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241109_090745.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241109_093742.jpg" alt="alt text"></p><p>I bought a Döner Kebab for lunch. I must say it was a lifesaver in one such Sahara of Fine Foods: Deutschland. A Drehspiess mit Hähnchen is sold for 6€. Well, it’s not only goat in quality (the taste) but also fantastic when it comes to quantity. I love Kebab.<br><img src="/images/life-in-germany/IMG_20241109_115651.jpg" alt="alt text"></p><p>The Neckar River under sufficient sunlight is quite beatiful. I took several photos.<br><img src="/images/life-in-germany/IMG_20241109_123035.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241109_123845.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241109_124410.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241109_125054.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241109_125803.jpg" alt="alt text"></p><p>Enjoy it, at least at present.</p><h2><span id="day-5-try-the-public-transport-for-the-first-time">Day 5: Try the public transport for the first time</span></h2><p>I think the time and money I spent for the previous days are sadly wasted :(. The public transport is way too easy and convenient.</p><p>Also tried the Pide mit Döner. It’s peak.<br><img src="/images/life-in-germany/IMG_20241110_181649.jpg" alt="alt text"></p><p>So much for today. Many of the problems are solved. Life is changing towards a better direction. Happy.</p><h2><span id="new-week-uni-life-and-great-challenges">New Week, Uni life and great challenges</span></h2><p>OK. Use one picture to describe the first Uni days:<br><img src="/images/life-in-germany/9aaad007ea56aad635303d6811ed2e9e.jpg" alt="alt text"><br>“Everyday in the d**ned uni is not good.”</p><p>Pick your opponent:</p><p>English with</p><ul><li>Sauerkraut flavour (Deutsch)</li><li>Curry flavour (Indian)</li><li>Kebab flavour (Turkish)</li><li>…</li></ul><p>Well, nix klappt, tue ich nix. :(</p><p>But there’re still few good things in the dull life, like the (Black-headed) gulls I encountered on my way to the shitty students’ canteen. I even don’t believe they can be true. Almost the same as what I saw on Megijima. (but that was fake)</p><p>Let’s have a look:<br><img src="/images/life-in-germany/AFE2CFC6EEAEED7A0A46AB02C479DD66.jpg" alt="alt text"></p><p>The fake ones in Megijima:<br><img src="/images/life-in-germany/70859054005d0824db08dbc4e7fcb6e9.jpg" alt="alt text"></p><p>I will move to my rented house this Friday. I think things are really getting better but I need to emphasize more on study and work hard..</p><h2><span id="move-into-the-apartment">Move into the apartment</span></h2><p>Hello new life!<br><img src="/images/life-in-germany/FD2DBA198849782A1D79345D31B7A7CD.jpg" alt="alt text"><br><img src="/images/life-in-germany/3CAC5C4F7ABDC62223A7A4C8FCA69CDD.jpg" alt="alt text"></p><h2><span id="snippets-of-the-days">Snippets of the Days</span></h2><p><img src="/images/life-in-germany/1C46FD38810DA6755F42C730127F196F.jpg" alt="alt text"><br><img src="/images/life-in-germany/8F984354B88F10602699E4CC09443165.jpg" alt="alt text"><br><img src="/images/life-in-germany/8295A9368AD9B9A877566A221E47B2EA.jpg" alt="alt text"><br><img src="/images/life-in-germany/B1A13BA628DFD57CABB5E91B00795870.jpg" alt="alt text"><br><img src="/images/life-in-germany/CDA2215B9B24B63E61D43B62FB60F0A4.jpg" alt="alt text"><br><img src="/images/life-in-germany/FDD9079C7A16B29DFD0A72C244BC52FF.jpg" alt="alt text"></p><h2><span id="sidequest">Sidequest</span></h2><h3><span id="konomi">Konomi</span></h3><p>Konomi is a Japanese 喫茶店 running by a Japanese Grandma near Peterskirche (Peter’s Church) in Heidelberg Altstadt. It’s famous in the city and has awesome vibe inside. Matcha Latte and Japanese snacks like Takoyaki, Udon, Soba etc. are the signature products. I tried Matcha Latte (with standard milk) and Soba. That was good.</p><p>「Entschuldigung, 写真オーケー？」</p><p>「Haha, ja!」</p><p>Then I took the photos:<br><img src="/images/life-in-germany/IMG_20241108_111908.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241108_113444.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241108_113726.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241108_113738.jpg" alt="alt text"><br><img src="/images/life-in-germany/IMG_20241108_105931.jpg" alt="alt text"></p><p>After I finished the dish, I gave the Grandma a classical 「ご馳走様でした！」. She was really delighted. :) I guess. I also bet that she came from Kyoto.</p><h3><span id="min-ramen-bar">Min Ramen Bar</span></h3><p><img src="/images/life-in-germany/FFBCBF50EE8F784671DACAB99E4C1746.jpg" alt="alt text"><br><img src="/images/life-in-germany/7E9B2E82ADD74ABEF146DD4BA9513C3E.jpg" alt="alt text"></p><h3><span id="bust-on-bismarckplatz">Bust on Bismarckplatz</span></h3><p><img src="/images/life-in-germany/806BC2F9A5C3DA1B98D21505E9FD24E2.jpg" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;[object Object]&quot; class=&quot;aplaye</summary>
      
    
    
    
    
    <category term="Deutschland" scheme="https://tsumugivolle77.github.io/tags/Deutschland/"/>
    
    <category term="life" scheme="https://tsumugivolle77.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>A Proof of an Interesting Property of Normal Matrices</title>
    <link href="https://tsumugivolle77.github.io/2024/10/30/A-Proof-of-an-Interesting-Property-of-Normal-Matrices/"/>
    <id>https://tsumugivolle77.github.io/2024/10/30/A-Proof-of-an-Interesting-Property-of-Normal-Matrices/</id>
    <published>2024-10-30T10:16:03.000Z</published>
    <updated>2024-11-19T13:06:29.610Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>I don’t want to waste time to do formula editting so post image instead ;p</p><h2><span id="description">Description</span></h2><p><img src="/images/4a6fc784558e685735358e1809edbd49.png" alt="alt text"></p><h2><span id="solution">Solution</span></h2><p><img src="/images/QQ_1730259342483.png" alt="alt text"></p><h2><span id="comments">Comments</span></h2><p>The proof consists of 3 important parts:</p><ul><li>A normal matrix, with property <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="11.601ex" height="2.135ex" role="img" focusable="false" viewbox="0 -861.5 5127.5 943.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="msup" transform="translate(750,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(783,363) scale(0.707)"><path data-c="2020" d="M182 675Q195 705 222 705Q234 705 243 700T253 691T263 675L262 655Q262 620 252 549T240 454V449Q250 451 288 461T346 472T377 461T389 431Q389 417 379 404T346 390Q327 390 288 401T243 412H240V405Q245 367 250 339T258 301T261 274T263 225Q263 124 255 -41T239 -213Q236 -216 222 -216H217Q206 -216 204 -212T200 -186Q199 -175 199 -168Q181 38 181 225Q181 265 182 280T191 327T204 405V412H201Q196 412 157 401T98 390Q76 390 66 403T55 431T65 458T98 472Q116 472 155 462T205 449Q204 452 204 460T201 490T193 547Q182 619 182 655V675Z"/></g></g><g data-mml-node="mo" transform="translate(2174.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(3230.5,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(783,363) scale(0.707)"><path data-c="2020" d="M182 675Q195 705 222 705Q234 705 243 700T253 691T263 675L262 655Q262 620 252 549T240 454V449Q250 451 288 461T346 472T377 461T389 431Q389 417 379 404T346 390Q327 390 288 401T243 412H240V405Q245 367 250 339T258 301T261 274T263 225Q263 124 255 -41T239 -213Q236 -216 222 -216H217Q206 -216 204 -212T200 -186Q199 -175 199 -168Q181 38 181 225Q181 265 182 280T191 327T204 405V412H201Q196 412 157 401T98 390Q76 390 66 403T55 431T65 458T98 472Q116 472 155 462T205 449Q204 452 204 460T201 490T193 547Q182 619 182 655V675Z"/></g></g><g data-mml-node="mi" transform="translate(4377.5,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g></g></g></svg></mjx-container>, is diagonalizable by unitary matrix <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.735ex" height="1.595ex" role="img" focusable="false" viewbox="0 -683 767 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g></g></g></svg></mjx-container>, with <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.649ex" height="2.135ex" role="img" focusable="false" viewbox="0 -861.5 3822.7 943.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="msup" transform="translate(767,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mo" transform="translate(854.2,363) scale(0.707)"><path data-c="2020" d="M182 675Q195 705 222 705Q234 705 243 700T253 691T263 675L262 655Q262 620 252 549T240 454V449Q250 451 288 461T346 472T377 461T389 431Q389 417 379 404T346 390Q327 390 288 401T243 412H240V405Q245 367 250 339T258 301T261 274T263 225Q263 124 255 -41T239 -213Q236 -216 222 -216H217Q206 -216 204 -212T200 -186Q199 -175 199 -168Q181 38 181 225Q181 265 182 280T191 327T204 405V412H201Q196 412 157 401T98 390Q76 390 66 403T55 431T65 458T98 472Q116 472 155 462T205 449Q204 452 204 460T201 490T193 547Q182 619 182 655V675Z"/></g></g><g data-mml-node="mo" transform="translate(2262.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(3318.7,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></svg></mjx-container>, as <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="6.061ex" height="1.999ex" role="img" focusable="false" viewbox="0 -861.5 2679.2 883.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(767,0)"><path data-c="39B" d="M320 708Q326 716 340 716H348H355Q367 716 372 708Q374 706 423 547T523 226T575 62Q581 52 591 50T634 46H661V0H653Q644 3 532 3Q411 3 390 0H379V46H392Q464 46 464 65Q463 70 390 305T316 539L246 316Q177 95 177 84Q177 72 198 59T248 46H253V0H245Q230 3 130 3Q47 3 38 0H32V46H45Q112 51 127 91Q128 92 224 399T320 708Z"/></g><g data-mml-node="msup" transform="translate(1461,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mo" transform="translate(854.2,363) scale(0.707)"><path data-c="2020" d="M182 675Q195 705 222 705Q234 705 243 700T253 691T263 675L262 655Q262 620 252 549T240 454V449Q250 451 288 461T346 472T377 461T389 431Q389 417 379 404T346 390Q327 390 288 401T243 412H240V405Q245 367 250 339T258 301T261 274T263 225Q263 124 255 -41T239 -213Q236 -216 222 -216H217Q206 -216 204 -212T200 -186Q199 -175 199 -168Q181 38 181 225Q181 265 182 280T191 327T204 405V412H201Q196 412 157 401T98 390Q76 390 66 403T55 431T65 458T98 472Q116 472 155 462T205 449Q204 452 204 460T201 490T193 547Q182 619 182 655V675Z"/></g></g></g></g></svg></mjx-container>;</li><li>The column vectors of unitary matrix form a set of orthonormal basis of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.043ex;" xmlns="http://www.w3.org/2000/svg" width="2.781ex" height="1.631ex" role="img" focusable="false" viewbox="0 -702 1229.3 721"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="2102" d="M684 131Q684 125 672 109T633 71T573 29T489 -5T386 -19Q330 -19 276 -3T174 46T91 134T44 261Q39 283 39 341T44 421Q66 538 143 611T341 699Q344 699 364 700T395 701Q449 698 503 677T585 655Q603 655 611 662T620 678T625 694T639 702Q650 702 657 690V481L653 474Q640 467 628 472Q624 476 618 496T595 541Q562 587 507 625T390 663H381Q337 663 299 625Q212 547 212 336Q212 249 233 179Q274 30 405 30Q533 30 641 130Q658 147 666 147Q671 147 677 143T684 131ZM250 625Q264 643 261 643Q238 635 214 620T161 579T110 510T79 414Q74 384 74 341T79 268Q89 213 113 169T164 101T217 61T260 39L277 34Q270 41 264 48Q199 111 181 254Q178 281 178 344T181 434Q200 559 250 625ZM621 565V625Q617 623 613 623Q603 619 590 619H575L588 605Q608 583 610 579L621 565Z"/></g></g><g data-mml-node="mi" transform="translate(755,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>. As a result arbitrary vector <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="6.644ex" height="1.679ex" role="img" focusable="false" viewbox="0 -702 2936.8 742"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(762.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="msup" transform="translate(1707.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="2102" d="M684 131Q684 125 672 109T633 71T573 29T489 -5T386 -19Q330 -19 276 -3T174 46T91 134T44 261Q39 283 39 341T44 421Q66 538 143 611T341 699Q344 699 364 700T395 701Q449 698 503 677T585 655Q603 655 611 662T620 678T625 694T639 702Q650 702 657 690V481L653 474Q640 467 628 472Q624 476 618 496T595 541Q562 587 507 625T390 663H381Q337 663 299 625Q212 547 212 336Q212 249 233 179Q274 30 405 30Q533 30 641 130Q658 147 666 147Q671 147 677 143T684 131ZM250 625Q264 643 261 643Q238 635 214 620T161 579T110 510T79 414Q74 384 74 341T79 268Q89 213 113 169T164 101T217 61T260 39L277 34Q270 41 264 48Q199 111 181 254Q178 281 178 344T181 434Q200 559 250 625ZM621 565V625Q617 623 613 623Q603 619 590 619H575L588 605Q608 583 610 579L621 565Z"/></g></g><g data-mml-node="mi" transform="translate(755,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> can be reformulated as <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.47ex" height="1.731ex" role="img" focusable="false" viewbox="0 -683 3301.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(762.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(1818.6,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(2585.6,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g></g></g></svg></mjx-container>;</li><li>The property to be proven is easily shown when the normal matrix is also a diagonal matrix (As is shown in the Lemma).</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;[object Object]&quot; class=&quot;aplaye</summary>
      
    
    
    
    <category term="maths" scheme="https://tsumugivolle77.github.io/categories/maths/"/>
    
    
    <category term="maths" scheme="https://tsumugivolle77.github.io/tags/maths/"/>
    
    <category term="linear algebra" scheme="https://tsumugivolle77.github.io/tags/linear-algebra/"/>
    
  </entry>
  
  <entry>
    <title>SFINAE 的发展史</title>
    <link href="https://tsumugivolle77.github.io/2024/10/25/SFINAE%20%E7%9A%84%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    <id>https://tsumugivolle77.github.io/2024/10/25/SFINAE%20%E7%9A%84%E5%8F%91%E5%B1%95%E5%8F%B2/</id>
    <published>2024-10-24T22:00:00.000Z</published>
    <updated>2024-11-19T13:06:47.422Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文写于2021年12月，发布在本人的老博客和校科协的网站上；现转载于此。</p><h2><span id="前言">前言</span></h2><p>说到 C++ 的模板技术，有一个术语不得不提：<strong>SFINAE</strong> (读作 Sfee-nay，<strong>S</strong>ubstitution <strong>F</strong>ailure is <strong>N</strong>ot <strong>A</strong>n <strong>E</strong>rror )。这个技术使得 C++ 这样的静态语言在一定程度上可以实现类似反射的功能 (可以根据类型的特征，表现出不同的行为)。在 C++20 标准概念库发布之后，许多运用到 <strong>SFINAE</strong> 的场景都可以被概念取代，这一古老的方案也许也将退出到幕后。</p><p>当然，这不是一件值得悲伤的事情，这说明标准委员会在积极地寻求摆脱历史的包袱的途径。</p><p>这篇文章旨在向想要了解 <strong>SFINAE</strong> 的读者介绍这一技术的发展历史。</p><span id="more"></span><h2><span id="什么是-sfinae">什么是 <strong>SFINAE</strong>?</span></h2><p>任何人，看到那样一长串的英文解释，或许都会懵逼。<strong>替换失败不是一个错误？</strong>什么鬼？</p><p>更加具体地说，这句话的意思是，在<strong>模板实例化的过程中，替换失败不是一个错误。</strong></p><h2><span id="c98-的做法">C++98 的做法</span></h2><p>下面我将以判断一个类是否拥有 <code>size_t size()</code> 方法为例，来深入 <strong>SFINAE</strong>。</p><p>我们希望，假如这个类拥有 <code>size</code> 方法，那么就调用这个方法，否则使用另外一个泛化版本的方法。</p><h3><span id="traits">traits</span></h3><p>我们定义一个结构体 <code>hasSize</code> 作为类的特征，假如这个类拥有 <code>size</code> 方法，那么 <code>hasSize::value</code> 将会是 <code>true </code> (或1)，否则为 <code>false</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hasSize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Compile-time Boolean</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">char</span> yes;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span>  no;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Q:</strong> 你一定注意到了上面的 <code>typedef</code>，并且对此有些不解。它是做什么的？</p><p><strong>A:</strong> 它是用来做编译期的对错判断的。</p><p><strong>Q:</strong> 为什么要这么写？直接用函数返回 <code>true</code> 或 <code>false</code> 难道不好吗？</p><p><strong>A:</strong> 确实好，但是 C++98 的函数返回值只能在运行时获得。直到 C++11 引入 <code>constexpr</code> 之后，这一问题才得到改善。</p><p><strong>Q:</strong> 那为什么这么写就能达成我们的目的？</p><p><strong>A:</strong> 我们应该还记得 C 里的一个运算符，它长得有点像函数，但与它有关的求值却全都发生在编译期。那就是 <code>sizeof</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> b = <span class="built_in">sizeof</span>(<span class="type">int</span>) == <span class="built_in">sizeof</span>(<span class="type">char</span>);</span><br></pre></td></tr></table></figure><p>上面的两个赋值语句，其赋值号右边的值均可以在编译期求得。而看到第二个语句，你一定已经恍然大悟。</p><p>下面就是我们的 <strong>SFINAE</strong> 登场的时候了。</p><p>我们在结构体内加入另外一个脚手架结构体 <code>reallyHas</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U, U u&gt; <span class="keyword">struct</span> <span class="title class_">reallyHas</span>;</span><br></pre></td></tr></table></figure><p>我们在参数 <code>U</code> 中可以给出函数指针的类型，在参数 <code>u</code> 中给出成员函数的具体名字。</p><p>然后给出两个函数 <code>test</code> 的重载版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U,</span><br><span class="line">          <span class="keyword">typename</span> = reallyHas&lt;<span class="built_in">size_t</span>(U::*)() <span class="type">const</span>, &amp;U::size&gt;&gt;</span><br><span class="line"><span class="type">static</span> yes <span class="built_in">test</span>(U) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fallback:</span></span><br><span class="line"><span class="type">static</span> no <span class="built_in">test</span>(...) &#123; &#125;</span><br></pre></td></tr></table></figure><p>第一个版本返回 <code>yes</code>，接受 <code>U</code> 类型的变量为参数，模板参数列表里第一个是 <code>U</code>，第二个参数是我们之前的脚手架 <code>reallyHas</code>。</p><p>第二个版本接受可变长参数。</p><p>匹配 <code>test</code> 版本的过程中，会发生这样的事：</p><ul><li><code>test</code> 从参数中推导出 <code>U</code> 的具体类型，代入模板的第一个参数，然后把所有的 <code>U</code> 替换成这个类型。</li><li>替换 (Substitution) 完毕，接着编译器会去查找实例化后 <code>test</code> 中和替换后 <code>U</code> 有关的部分（本例中就是 <code>size_t(U::*)() const</code> 类型的 <code>&amp;U::size</code>），假如它们不存在，那么这次替换就宣告失败 (Failure)。但替换失败不是一个错误 (Error)，编译器会接着匹配，直到所有候选名单 (<em>candidates</em>) 的成员都不匹配，才会报错。</li><li>随着第一个匹配失败，模板去匹配可变长参数版本的 <code>test</code>。这个版本无论如何一定能匹配成功，而它的返回值类型是 <code>no</code>。</li></ul><p>然后我们使用一个枚举常量 <code>value</code> 来接受结果：（C++11 之后便被 <code>constexpr</code> 取代）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    value = <span class="built_in">sizeof</span>(<span class="built_in">test</span>(<span class="built_in">T</span>())) == <span class="built_in">sizeof</span>(yes)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这一过程，我们并不需要函数具体的返回值，而只是对返回值的类型作操作。这冥冥之中也印证了一句话：C++的模板是编译期的多态，是类型的多态（或者也可以说，类型和值本身可以等价）。</p><p>当然上面的并不是最终版本，假如我们的 <code>size</code> 有两种可能的版本：</p><ul><li><code>size_t(U::*)() const</code></li><li><code>size_t(U::*)()</code></li></ul><p>那么我们就无法简单使用上面的做法了。</p><p>下面提供一种更加简洁的做法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hasSize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">char</span> yes;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span>  no;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U, U u&gt; <span class="keyword">struct</span> <span class="title class_">reallyHas</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt; <span class="function"><span class="type">static</span> yes <span class="title">test</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        reallyHas&lt;<span class="type">size_t</span>(U::*)(), &amp;U::size&gt; *)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt; <span class="function"><span class="type">static</span> yes <span class="title">test</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        reallyHas&lt;<span class="type">size_t</span>(U::*)() <span class="type">const</span>, &amp;U::size&gt; *)</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="function"><span class="type">static</span> no <span class="title">test</span><span class="params">(...)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span></span><br><span class="line">    &#123;</span><br><span class="line">        value = <span class="built_in">sizeof</span>(<span class="built_in">test</span>&lt;T&gt;(<span class="built_in">int</span>())) == <span class="built_in">sizeof</span>(yes)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于 C++ 整形可以隐式转化为指针，我们仍然会先匹配 <code>yes</code> 版本的 <code>test</code>。</p><h3><span id="enable_if">enable_if</span></h3><p>下面我们使用之前的 <code>hasSize</code> 来帮助我们实现目的。我们来引入另外一个工具人：<code>enable_if</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="type">bool</span>, <span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">enable_if</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">typedef</span> T type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">enable_if</span>&lt;<span class="literal">false</span>, T&gt;</span><br><span class="line">&#123; &#125;;</span><br></pre></td></tr></table></figure><p>看起来有点懵？不知道它要干嘛？我们继续实现我们的 <code>getSize</code> 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">  <span class="keyword">typename</span> enable_if&lt;hasSize&lt;T&gt;::value, <span class="type">size_t</span>&gt;::<span class="function">type</span></span><br><span class="line"><span class="function"><span class="title">getSize</span><span class="params">(<span class="type">const</span> T &amp;obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;obj has size&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="comment">/* disable if: */</span></span><br><span class="line">  <span class="keyword">typename</span> enable_if&lt;!hasSize&lt;T&gt;::value, <span class="type">size_t</span>&gt;::<span class="function">type</span></span><br><span class="line"><span class="function"><span class="title">getSize</span><span class="params">(<span class="type">const</span> T &amp;obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;obj has no size&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sizeof</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两处都得写上 <code>enable_if</code>，否则会产生二义性。（如果其中一个 <code>enable_if</code> 的参数1为 <code>true</code>，那么返回值类型是 <code>size_t</code>，那么另外一个 <code>enable_if</code> 必然没有返回值类型（也就是type成员），所以它会被排除在候选名单之外，假如另外一个函数拥有返回值类型，那么这个时候编译器将会不明白应该调用哪个版本的函数，从而产生 error）</p><p>下面来试验一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">getSize</span>(v) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">getSize</span>(c) &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj has size</span><br><span class="line">4</span><br><span class="line">obj has no size</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2><span id="时间来到-c11">时间来到 C++11</span></h2><p>我们在讲述 C++98 的解决方法的时候，已经说过：许多东西到了 C++11 会有更好的解决办法。</p><p>现在我们终于可以介绍 C++11 了。</p><p>其实本来并没有 C++11，它最早的名字叫做 C++0x，因为人们坚信在二十一世纪的前十年 C++11 的标准就能够实现，然而实际上直到2011年，C++11 才正式发布。</p><p>C++11 为模板编程带来了许多的便利。</p><ul><li>首先是编译期表达式类型推导 <code>decltype</code>。</li><li>接着是 <code>std::declval</code>，这是一个模板函数，它允许我们构造一个类型 <code>T</code> 的临时量，而无需我们提供参数对其构造。</li><li>还有我们之前说过的 <code>constexpr</code>，也是千呼万唤始出来。</li><li><code>std::enable_if</code>，它进标准了。</li><li>当然还有新的标准库头文件，<code>type_traits</code>，它为我们提供了许许多多方便的 <code>traits</code>，我们不需要再自己手动实现了。</li></ul><p>在 C++11 中，我们将使用另外一个例子——判断一个类是否是可以比较大小的。(这里以小于号为例)</p><p>我们写一个类模板 <code>isComparable</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">isComparable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="title">test</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">decltype</span>(std::declval&lt;U&gt;() &lt; std::declval&lt;U&gt;()) *)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="title">test</span><span class="params">(...)</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="comment">// C++11 initializer list</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">bool</span> value &#123; <span class="built_in">test</span>&lt;T&gt;(<span class="built_in">int</span>()) &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在  <code>test</code> 的参数中用到了 <code>decltype</code> 和 <code>std::declval</code>。用 <code>declval</code> 来查询是否两个 <code>U</code> 类型的变量重载了（或者本身就拥有）<code>operator&lt;</code>，如果拥有，则匹配成功，否则匹配失败，将会匹配可变长参数版本的 <code>test</code>。</p><p>C++11 版本下我们的许多操作变得更加符合直觉，实现也更加简洁明了。</p><p>试验：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(Test1);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span></span><br><span class="line">&#123; &#125;;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; isComparable&lt;Test1&gt;::value &lt;&lt; std::endl; <span class="comment">// 1</span></span><br><span class="line">std::cout &lt;&lt; isComparable&lt;Test2&gt;::value &lt;&lt; std::endl; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>除此之外还有另一种方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,</span><br><span class="line">          <span class="keyword">typename</span> = <span class="type">bool</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> isComparable: std::false_type</span><br><span class="line"><span class="comment">// 继承而来的 value 成员为 false，下面类似。</span></span><br><span class="line">&#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">isComparable</span>&lt;</span><br><span class="line">    T, <span class="keyword">decltype</span>(std::<span class="built_in">declval</span>&lt;T&gt;() &lt; std::<span class="built_in">declval</span>&lt;T&gt;())</span><br><span class="line">&gt;: std::true_type</span><br><span class="line">&#123; &#125;;</span><br></pre></td></tr></table></figure><p>第一个版本的 <code>isComparable</code> 默认参数一定要设为 <code>bool</code>，也就是 <code>operator&lt;</code> 返回值的类型，原因是：</p><ul><li>当类模板有默认参数的时候，编译器会更加偏袒那个有默认参数的模板；</li><li>当带有默认参数的模板与另外一个偏特化模板参数一致的时候，则会优先选择那个偏特化的版本。</li></ul><p>于是当 <code>[T = Test1]</code>，偏特化版本模板的第二个参数也是 <code>bool</code>，于是选择了第二个偏特化版本的模板。</p><p>当 <code>[T = Test2]</code>，<strong>SFINAE</strong> 的规则让我们不得不选择第一个版本的模板。</p><h2><span id="c14-泛型-lambda">C++14 泛型 <code>lambda</code></span></h2><p>C++14 让我们的匿名函数支持 <code>auto</code> 类型的参数。它的本质其实就是带有模板括号运算符的仿函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> f = [] (<span class="keyword">auto</span> x) &#123; <span class="keyword">return</span> x; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// equivalent to:</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Unnamed</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">operator</span><span class="params">()</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">&#125; functor;</span><br></pre></td></tr></table></figure><p>因此 <strong>SFINAE</strong> 的技术也能够适用于它。</p><p>我们可以用泛型 <code>lambda</code> 来实现袖珍版的 <code>traits</code>。</p><p>先上效果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="keyword">operator</span>&lt;<span class="params">(B <span class="type">const</span> &amp;)</span> <span class="type">const</span> </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> hasLess = <span class="built_in">is_valid</span>([] (<span class="keyword">auto</span> &amp;&amp;x) -&gt; <span class="keyword">decltype</span>(x &lt; x) &#123; &#125;);</span><br><span class="line">std::cout &lt;&lt; std::boolalpha;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">hasLess</span>(<span class="number">43</span>)  &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">hasLess</span>(<span class="built_in">A</span>()) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">hasLess</span>(<span class="built_in">B</span>()) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> comparableWith = <span class="built_in">is_valid</span>(</span><br><span class="line">    [] (<span class="keyword">auto</span> &amp;&amp;x, <span class="keyword">auto</span> &amp;&amp;y) -&gt; <span class="keyword">decltype</span>(x &lt; y) &#123; &#125;);</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">comparableWith</span>(<span class="number">43</span>, <span class="string">&quot;Abc&quot;</span>s) &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">comparableWith</span>(<span class="number">43</span>, <span class="number">72.2</span>)   &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">comparableWith</span>(<span class="built_in">B</span>(), <span class="built_in">B</span>())   &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="built_in">comparableWith</span>(<span class="built_in">A</span>(), <span class="built_in">B</span>())   &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这个 <code>is_valid</code> 是个啥，好神奇。下面我们就来详细解释一下：</p><p>首先，它是一个<strong>工厂函数</strong>。产生 <code>is_valid_impl</code> 类型的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">is_valid_impl</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    F _f;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Ts&gt;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="keyword">auto</span> <span class="title">test</span><span class="params">(Ts&amp;&amp;... ts)</span></span></span><br><span class="line"><span class="function">        -&gt; <span class="title">decltype</span><span class="params">(_f(ts...), <span class="literal">true</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fallback</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">bool</span> <span class="title">test</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">explicit</span> <span class="title">is_valid_impl</span><span class="params">(F &amp;&amp;f)</span>: _f(f) &#123;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Us&gt;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">auto</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Us&amp;&amp;... us)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> <span class="built_in">test</span>(us...); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</span><br><span class="line"><span class="function">is_valid_impl&lt;F&gt; <span class="title">is_valid</span><span class="params">(F &amp;&amp;f)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> <span class="built_in">is_valid_impl</span>&lt;F&gt;(std::forward&lt;F&gt;(f)); &#125;</span><br></pre></td></tr></table></figure><p><code>is_valid_impl</code> 的工作原理：</p><ul><li>依靠 <code>is_valid_impl</code> 构造函数把仿函数对象 <code>_f</code> 初始化。</li><li><code>operator()</code> 从调用时的实参列表推导出来 <code>Us...</code> 将运算委任给 <code>test</code> 函数。</li><li>首先匹配第一个版本的 <code>test</code>，这个过程有 <strong>SFINAE</strong> 的参与：<code>decltype</code> 时，将形参代入 <code>_f</code>，而我们的 <code>_f</code> 形如：<code>[] (auto &amp;&amp;x, auto &amp;&amp;y) -&gt; decltype(x &lt; y) &#123; &#125;</code>，如果参数无法进行某些指定操作，或者参数长度不匹配，那么第一个版本的 <code>test</code> 被 <code>SFINAE out</code>。否则匹配成功，返回 <code>true</code>。</li><li>匹配失败，这个时候就进入第二个版本的 <code>test</code>，其无论如何都会返回 <code>false</code>。</li></ul><p>由于 C++14 参数推导还不够智能，所以我们这里<strong>不得不使用</strong>一个工厂函数来帮助我们推导 <code>F</code> 的类型，而在后续标准，我们可以不再需要这个工厂函数，而直接使用构造函数了。</p><h2><span id="c17-void_t">C++17 void_t</span></h2><p>C++17 引入了一个 类模板<code>std::void_t</code>，它可以干啥呢？接受一长串的类型，但自己永远是 <code>void</code>。它其实就是一个别名模板，长成这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>...&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="type">void_t</span> = <span class="type">void</span>;</span><br></pre></td></tr></table></figure><p>现在可以方便地使用 <code>decltype</code> + 逗号表达式，来完成一长串的判断，而无需判断返回值类型了（有的时候返回值类型是难以判断的，比如返回值类型带有模板参数）。</p><p>下面给出一个终极版 <code>isComparable</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T,</span><br><span class="line">          <span class="keyword">typename</span> = <span class="type">void</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> isComparable: std::false_type</span><br><span class="line">&#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">isComparable</span>&lt;T, std::<span class="type">void_t</span>&lt;<span class="keyword">decltype</span>(</span><br><span class="line">    std::<span class="built_in">declval</span>&lt;T&gt;() &lt; std::<span class="built_in">declval</span>&lt;T&gt;(),</span><br><span class="line">    std::<span class="built_in">declval</span>&lt;T&gt;() &gt; std::<span class="built_in">declval</span>&lt;T&gt;(),</span><br><span class="line">    std::<span class="built_in">declval</span>&lt;T&gt;() &gt;= std::<span class="built_in">declval</span>&lt;T&gt;(),</span><br><span class="line">    std::<span class="built_in">declval</span>&lt;T&gt;() &lt;= std::<span class="built_in">declval</span>&lt;T&gt;(),</span><br><span class="line">    std::<span class="built_in">declval</span>&lt;T&gt;() == std::<span class="built_in">declval</span>&lt;T&gt;(),</span><br><span class="line">    std::<span class="built_in">declval</span>&lt;T&gt;() != std::<span class="built_in">declval</span>&lt;T&gt;())&gt;&gt;: std::true_type</span><br><span class="line">&#123; &#125;;</span><br></pre></td></tr></table></figure><h2><span id="c20-concepts">C++20 concepts</span></h2><p>如前言所说，C++20 概念库或给 <strong>SFINAE</strong> 的时代画上一个句号。那么我们也用概念重写的 <code>isComparable</code> 为本文画上一个句号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">concept</span> is_bool = std::is_convertible_v&lt;T, <span class="type">bool</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">concept</span> isComparable =</span><br><span class="line">  <span class="built_in">requires</span> (T t)</span><br><span class="line">&#123;                            </span><br><span class="line">    &#123;t &gt;  t&#125; -&gt; is_bool; &#123;t &lt;  t&#125; -&gt; is_bool;</span><br><span class="line">    &#123;t &gt;= t&#125; -&gt; is_bool; &#123;t &lt;= t&#125; -&gt; is_bool;</span><br><span class="line">    &#123;t == t&#125; -&gt; is_bool; &#123;t != t&#125; -&gt; is_bool;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">concept</span> isNotComparable = !isComparable&lt;T&gt;;</span><br></pre></td></tr></table></figure><p>我们可以这么使用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用不同的概念我们可以提供不同的重载函数版本（即便参数列表相同）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(isComparable <span class="keyword">auto</span>&amp;&amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;is comparable&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(isNotComparable <span class="keyword">auto</span>&amp;&amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;is not comparable&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">foo</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">foo</span>(<span class="built_in">Test</span>());</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is comparable</span><br><span class="line">is not comparable</span><br></pre></td></tr></table></figure><p>当然我们可以把 <code>concepts</code> 和上面的那些类模板结合起来，用来做空基类优化，不过那就不是本文要讨论的内容了。</p><h2><span id="后记">后记</span></h2><p>尽管我曾在前言说过，我们毋须为 <strong>SFINAE</strong> 技术的退出而悲伤，但我认为 <strong>SFINAE</strong> 技术是老一代 C++ 工程师智慧的结晶。二十多年过去，C++ 标准从跛脚逐步开始走向完善，使用 C++ 抽象的方法日趋成熟，我想这其中不无他们的功劳。在模板技术发展的过程中，许多东西都事出偶然，然而如果没有前人的不懈尝试，这些偶然又怎会成为已经发生的必然？</p><p>当然，<strong>SFINAE</strong> 作为 C++ 本身的一个语言规则，它仍然会在底层发挥作用。不得不直接倚赖底层的东西去解决上层的问题，这是 C++ 过去的缺陷。</p><p>人们始终不停地在探索这个语言的极限，我想这才是 C++ 吸引人的地方。</p><p>如果这篇文章能给读者带来一丝启发，那就再好不过了。</p><h2><span id="参考">参考</span></h2><p><em><strong>Jean Guegant: An introduction to C++’s SFINAE concept: compile-time introspection of a class member</strong></em> [<a href="https://jguegant.github.io/blogs/tech/sfinae-introduction.html]">https://jguegant.github.io/blogs/tech/sfinae-introduction.html]</a> （我的 <strong>SFINAE</strong> 启蒙读物）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文写于2021年12月，发布在本人的老博客和校科协的网站上；现转载于此。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;说到 C++ 的模板技术，有一个术语不得不提：&lt;strong&gt;SFINAE&lt;/strong&gt; (读作 Sfee-nay，&lt;strong&gt;S&lt;/strong&gt;ubstitution &lt;strong&gt;F&lt;/strong&gt;ailure is &lt;strong&gt;N&lt;/strong&gt;ot &lt;strong&gt;A&lt;/strong&gt;n &lt;strong&gt;E&lt;/strong&gt;rror )。这个技术使得 C++ 这样的静态语言在一定程度上可以实现类似反射的功能 (可以根据类型的特征，表现出不同的行为)。在 C++20 标准概念库发布之后，许多运用到 &lt;strong&gt;SFINAE&lt;/strong&gt; 的场景都可以被概念取代，这一古老的方案也许也将退出到幕后。&lt;/p&gt;
&lt;p&gt;当然，这不是一件值得悲伤的事情，这说明标准委员会在积极地寻求摆脱历史的包袱的途径。&lt;/p&gt;
&lt;p&gt;这篇文章旨在向想要了解 &lt;strong&gt;SFINAE&lt;/strong&gt; 的读者介绍这一技术的发展历史。&lt;/p&gt;</summary>
    
    
    
    <category term="programming" scheme="https://tsumugivolle77.github.io/categories/programming/"/>
    
    
    <category term="C++" scheme="https://tsumugivolle77.github.io/tags/C/"/>
    
    <category term="SFINAE" scheme="https://tsumugivolle77.github.io/tags/SFINAE/"/>
    
    <category term="templates" scheme="https://tsumugivolle77.github.io/tags/templates/"/>
    
  </entry>
  
  <entry>
    <title>鸟白岛巡礼指北</title>
    <link href="https://tsumugivolle77.github.io/2024/10/25/%E9%B8%9F%E7%99%BD%E5%B2%9B%E5%B7%A1%E7%A4%BC%E6%8C%87%E5%8C%97/"/>
    <id>https://tsumugivolle77.github.io/2024/10/25/%E9%B8%9F%E7%99%BD%E5%B2%9B%E5%B7%A1%E7%A4%BC%E6%8C%87%E5%8C%97/</id>
    <published>2024-10-24T22:00:00.000Z</published>
    <updated>2024-11-19T13:06:36.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="[object Object]" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文搬运自本人的b站专栏。</p><h2><span id="写在前面">写在前面</span></h2><p>今天是2024年7月26日。本人刚刚从日本返回中国，总计在日本停留了九天，其中前三天在高松（包括男木岛、女木岛、直岛）度过。决定写一篇专栏来记录我的第一次巡礼之旅。这是一场身体很累，但心灵却得到治愈的旅途。在这之中，我收获了许多意外的惊喜。</p><span id="more"></span><p>由于秋叶原Cafe&amp;Bar MENU咖啡吧的Summer Pockets联动（原先定于7月25日结束，现已延迟到9月1日结束，需要提前预约），在高松旅程结束之后，笔者一路北上经由： “高松 –轮渡–&gt; 直岛 –轮渡–&gt; 宇野 –JR+新干线–&gt; 大阪 –阪急–&gt; 京都 –JR（原定新干线，但当天新干线脱轨。不是万不得已请不要使用JR，会绕很远的路且费用更高）–&gt; 东京”的线路最终到达秋叶原（途中当然在各地都进行了游玩）。</p><p>此外，如果不打算前往京都，飞机也是一个很好的选择（京都没有任何的公共机场，<del>如果你长了螺旋桨，那么忽视这一段</del>）。如果没有鸟白岛巡礼以外的其他目的，那么全程几乎不需要用到JR或是新干线等轨道交通（在这种情况下，也没有必要购买交通卡）。</p><p>接下来，本文将会囊括以下内容：</p><!-- toc --><ul><li><a href="#part-1-%E4%BD%8F%E5%AE%BF%E7%9A%84%E9%80%89%E9%A1%B9">Part 1. 住宿的选项</a><ul><li><a href="#11-%E4%BD%8F%E5%9C%A8%E9%AB%98%E6%9D%BE%E6%88%96%E7%9B%B4%E5%B2%9B">1.1 住在高松或直岛</a></li><li><a href="#12-%E4%BD%8F%E5%9C%A8%E7%94%B7%E6%9C%A8%E5%B2%9B">1.2 住在男木岛</a></li><li><a href="#~~13-%E4%BD%8F%E5%9C%A8%E5%A5%B3%E6%9C%A8%E5%B2%9B~~"><del>1.3 住在女木岛</del></a></li></ul></li><li><a href="#part-2-%E4%B9%98%E5%9D%90%E6%B8%A1%E8%BD%AE%E7%9A%84%E7%BB%86%E8%8A%82">Part 2. 乘坐渡轮的细节</a><ul><li><a href="#21-%E9%9B%8C%E9%9B%84%E5%B2%9B%E8%88%AA%E7%BA%BF">2.1 雌雄岛航线</a></li><li><a href="#22-%E5%9B%9B%E5%9B%BD%E8%88%AA%E7%BA%BF">2.2 四国航线</a></li></ul></li><li><a href="#part-3-%E5%B7%A1%E7%A4%BC%E7%BA%BF%E8%B7%AF%E9%80%89%E6%8B%A9-%E5%B2%9B%E4%B8%8A%E7%9A%84%E4%BA%A4%E9%80%9A%E6%96%B9%E5%BC%8F">Part 3. 巡礼线路选择、岛上的交通方式</a><ul><li><a href="#31-%E5%B7%A1%E7%A4%BC%E7%BA%BF%E8%B7%AF%E9%80%89%E6%8B%A9">3.1 巡礼线路选择</a></li><li><a href="#32-%E5%B2%9B%E4%B8%8A%E4%BA%A4%E9%80%9A%E6%96%B9%E5%BC%8F">3.2 岛上交通方式</a></li></ul></li><li><a href="#part-4-%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%94%99%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B7%A1%E7%A4%BC%E5%9C%B0%E7%82%B9">Part 4. 可能会错过的一些巡礼地点</a></li><li><a href="#part-5-%E5%AD%A3%E8%8A%82%E6%80%A7%E7%9A%84%E6%B4%BB%E5%8A%A82024%E5%B9%B4">Part 5. 季节性的活动（2024年）</a></li><li><a href="#part-6-%E5%B7%A1%E7%A4%BC%E5%8F%AF%E4%BB%A5%E9%80%89%E6%8B%A9%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7">Part 6. 巡礼可以选择的（软件）工具</a></li><li><a href="#part-7-%E5%9C%A8%E4%B8%8D%E4%BC%9A%E6%97%A5%E8%AF%AD%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">Part 7. 在不会日语的情况下，你可以做什么准备工作</a></li><li><a href="#%E7%BB%93%E8%AF%AD">结语</a></li></ul><!-- tocstop --><p>本文中的内容并不一定是我的亲身经历，有一部分来自于问询其他巡礼者，仅在本文中将其记录，以备今后二周目巡礼时查看。如果这篇文章可以在未来的某个时间帮到某个人，那么就再好不过了。</p><h2><span id="part-1-住宿的选项">Part 1. 住宿的选项</span></h2><h3><span id="11-住在高松或直岛">1.1 住在高松或直岛</span></h3><p>高松或直岛本身旅游开发比较完善，因此你可以使用住宿软件十分轻松地订到这两处的酒店。如果你选择住在高松，那么请注意选择邻近高松港的酒店。假如你打算居住在游戏中的加藤家<br>（现实中位于直岛的石井商店），那么请提前大约4个月预订（消息来源：我在巡礼过程中，在石井商店遇到的一位中国SP粉丝）。</p><h3><span id="12-住在男木岛">1.2 住在男木岛</span></h3><p>如果你是一个紬厨，希望拍摄到黄昏或夜晚的灯塔；或者渴望体验游戏中羽依里、細、静久三人合宿的剧情，那么住宿在男木岛是一个不错的选择。<br>我并没有居住在男木岛，在巡礼回来之前也并不知晓男木岛住宿的方法，直到我询问了一位在男木岛过夜的中国SP粉丝，得到的答案如下：<br>岛上的旅店；<br>灯塔露营；<br>住丰爷家。<br>男木岛上的旅店目前暂且无法通过线上方式进行预订，需要线下自行沟通。而关于丰爷，我会在后文介绍。可以预料到，住在男木岛对于初次巡礼的人（尤其是社恐二次元）很难实行，也具有很大的不确定性。</p><h3><span id="13-住在女木岛"><del>1.3 住在女木岛</del></span></h3><p><del>嗯？谁会住在女木岛。</del></p><h2><span id="part-2-乘坐渡轮的细节">Part 2. 乘坐渡轮的细节</span></h2><p>前往男木岛和女木岛以及前往直岛的航线分别由：雌雄岛海运株式会社以及四国海运株式会社运营。二者的售票处位于相距几百米的不同地点，如果不知道具体位置，可以用日语或简单的英语询问工作人员。<br>对于各交通节点之间的可达关系，可以这样概括：高松港、男木岛和女木岛之间两两可达，高松港、宇野和直岛之间两两可达。</p><h3><span id="21-雌雄岛航线">2.1 雌雄岛航线</span></h3><p>由于男木岛和女木岛属于较冷门的旅游景点，每天的渡轮班次相对较少，而且每天很早就结束运营。其海运时间表如下图所示：<br><img src="/images/img.png" alt="images/img.png"><br>注意：发船时刻提前半个小时开始售票。从图中可以得知，如果选择在8月的前20天出行，则班次会相对较多，行程安排会更加自由。</p><h3><span id="22-四国航线">2.2 四国航线</span></h3><p>直岛往返的渡轮时刻表，如下图绿色部分所示（红色部分是岛上大巴、蓝色部分是直岛艺术馆的免费巴士):<br><img src="/images/img_1.png" alt="images/img_1.png"><br>上图为前往直岛、下图为离开直岛。</p><h2><span id="part-3-巡礼线路选择-岛上的交通方式">Part 3. 巡礼线路选择、岛上的交通方式</span></h2><h3><span id="31-巡礼线路选择">3.1 巡礼线路选择</span></h3><p>巡礼的顺序大概可以分成以下四类：</p><ul><li>男木女木、直岛；</li><li>直岛、男木女木；</li><li>女木男木、直岛；</li><li>直岛、女木男木。<br>首先，个人而言，我并不推荐将女木岛放在男木岛前面，尽管它距离高松港最近。我更加推荐以直岛或男木岛作为巡礼的起点。这两者之间，我会更加优先参观男木岛。对于初次巡礼的时间安排上，我的建议是两到三天。在直岛上完全可以待上两天时间，去享受夏季的阳光沙滩，或者参观一下岛上的艺术馆，感受“度过快乐暑假的秘诀”。如无特殊情况（例如准备在男木岛过夜），男木岛和女木岛一天足矣。<br>接下来，介绍一下优先男木岛的理由。这里就不得不提到之前所说的丰爷（twitter id:@nekopoketoyoji)。除去已经关门的直岛小卖铺，男木岛丰爷的ねこポケハウス（NekopokeHouse）是三座岛上Summer Pockets元素最为浓厚的地方。丰爷的家里接待过无数各地的SP厨和爱猫人士，你可以在那找到各种的SP周边、在来访者日记中留下自己的痕迹、和其他到访的SP厨交流心得、得到一些巡礼的指南、或者吸一会猫。丰爷是一个非常有意思的老爷爷，经常在推特上冲浪。<br>很遗憾的是，我前往男木岛的那天，丰爷刚好因为有事前往高松。我只在男木岛役馆（村公所）门口见到他一面，并且没认出来他，我的紬痛T引起了他的注意。后来，我们在推特上也有一些友好的交流。如果有能力的话，完全可以在巡礼之前先在推特上和丰爷提前联系，打个招呼。<br>丰爷的家就在男木岛下船后，右手边役所旁边的小道往里。（小道旁边有一片墓地，可以方便定位。没有恶意）<br><img src="/images/img_2.png" alt="images/img_2.png"><br><img src="/images/img_3.png" alt="images/img_3.png"><br><img src="/images/img_4.png" alt="images/img_4.png"><br><img src="/images/img_5.png" alt="images/img_5.png"></li></ul><h3><span id="32-岛上交通方式">3.2 岛上交通方式</span></h3><p>男木岛：有且只有步行，岛上道路坡度比较大，注意安全、记得补充体力。不要打扰到岛上的居民。 </p><p>女木岛：主要的巡礼地点是鬼岛大洞窟（鸥线），下船后购买巴士票直达。 </p><p>直岛：租借自行车（宫浦港旁边非常显眼的一家店铺）和公交车（100日元可以坐到岛上任意一站，可以在港口附近的售票处找一本直岛指南（如下图）<br>随手查阅路线和运营时间）。直岛上的交通是最方便的。（如果你重新玩一遍《夏日口袋》的话，会发现羽依里在上岛后不久即遭遇了公交车，这点十分还原）<br><img src="/images/img_6.png" alt="images/img_6.png"><br><img src="/images/img_7.png" alt="images/img_7.png"></p><h2><span id="part-4-可能会错过的一些巡礼地点">Part 4. 可能会错过的一些巡礼地点</span></h2><ul><li><p>游戏标题画面的出处在直岛地中艺术馆可以找到。不太好找，也不太像。是日本友人带我找到的。<br><img src="/images/img_8.png" alt="images/img_8.png"><br><img src="/images/img_9.png" alt="images/img_9.png"></p></li><li><p>白羽线吃可丽饼的cg在JR宇野站的停车场内（我当时并没有想起来去找）。<br><img src="/images/img_10.png" alt="images/img_10.png"></p></li><li><p>*途橘的原型在国营常陆海滨公园（从东京使用公共交通过去得4个小时以上），建议4、5月份花期的时候去。这里我还闹了一个乌龙，找到另一个名字很像的地方了，不过当时时间也很紧，就没再找下去了。如果打算去，建议在附近住宿并且安排一天的时间。图片来自谷歌地图。<br><img src="/images/img_11.png" alt="images/img_11.png"></p></li><li><p>直岛上，加藤家&#x2F;岛上食堂原型的石井商店营业时间是11点到下午2点，如要就餐记得妥善安排时间。</p></li><li><p>紬家的原型起云阁：4-2 Showacho, Atami, Shizuoka 413-0022日本。</p></li><li><p>鸥线海盗船停靠的地点原型龙宫窟：Touji, Shimoda, Shizuoka 415-0029日本。</p></li></ul><h2><span id="part-5-季节性的活动2024年">Part 5. 季节性的活动（2024年）</span></h2><p>Summer Pockets的许多活动的开始&#x2F;结束都与7月25日有关，游戏中这一天是羽依里上岛的日子。如果你提前几个月在做圣地巡礼的计划（例如希望以此作为毕业旅行），那么建议将旅行的时间定在这一天之后。更具体一点：这一天之后的周末、或是8月31日（紬的生日）。如果这样计划，碰上特别的活动的概率会最大化。例如，2024年7月25日之后的第一个周六，也就是7月27日，是Key社Summer Festival售卖SP周边开始的时间。同样是这一年，7月25日开始到8月31日结束，是男木岛灯台祭的期间，起的早一些有可能遇上意外之喜；如果更特殊一点，碰上了这一段时间的周末，那么也许就有机会进到灯塔内部参观。<br>当然也有例外，秋叶原的SP咖啡厅联动原定于7月25日截止（现在延迟到9月1日）。关于咖啡厅的预约（一般需要提供日本手机号），我通过本人经验和与其他人交流，总结出了以下方法：</p><ul><li>直接通过推特私信与工作人员联系。这种方法可能不太礼貌，但我成功了；</li><li>在手机号一栏填写中国驻日大使馆的电话号码；</li><li>使用咖啡厅的提问网站进行问询和预约，给清楚信息，说 明来意：<a href="https://menu-store.com/inquiry%EF%BC%9B">https://menu-store.com/inquiry；</a></li><li>“没必要这么麻烦，我有日本手机号”，那么直接预订即可。<br>联动咖啡厅的部分商品在秋叶原电波会馆的K-Books中被溢价倒卖，本人十分反感这种行为，因为我没在咖啡厅买到我想要的爱丽丝紬徽章。如果实在有想要单收的周边，可以去那看看。<br><img src="/images/img_12.png" alt="images/img_12.png"><br><img src="/images/img_13.png" alt="images/img_13.png"><br><img src="/images/img_14.png" alt="images/img_14.png"><br><img src="/images/img_15.png" alt="images/img_15.png"></li></ul><h2><span id="part-6-巡礼可以选择的软件工具">Part 6. 巡礼可以选择的（软件）工具</span></h2><p>首先，出国在外，我建议你不要使用华为手机。提前买好日本流量卡。带好充电宝，手机开着导航耗电飞快。<br>我所使用到的工具大致如下：</p><ul><li>Google地图：在日本比较好用的地图工具；</li><li>Google翻译：如果你在日语不好的情况下英语又不太好&#x2F;需要和不会使用英语的日本人交流，那么可以使用。提前熟悉功能（例如语音翻译等)，谷歌翻译的质量还是堪忧的；</li><li><a href="https://anitabi.cn/map">Anitabi动画巡礼网站</a>，可以比较方便地查找到巡礼地点的位置；</li><li>换乘案内：一个查询日本换乘路线的APP；</li><li>Agoda：酒店预订工具，使用别的软件替代也无所谓；</li><li>其他（待补充）</li></ul><h2><span id="part-7-在不会日语的情况下你可以做什么准备工作">Part 7. 在不会日语的情况下，你可以做什么准备工作</span></h2><p>在一个陌生的环境下，你的外表是最具冲击力的语言。如果你想第一时间让别人知道自己的目的，你可以选择穿一件喜欢角色的痛T（如果经济实力不够，淘宝定制的就足够了）。这是本人定制的痛T：<br><img src="/images/img_16.png" alt="images/img_16.png"><br>这是我的成果：<br><img src="/images/img_17.png" alt="images/img_17.png"><br>此外，提前在推特上关注丰爷等人的账号，熟悉外面的SP圈子，实时记录行程，可以帮助你更快地找到同好。<br>日本人<del>废话</del>说的不少，提前记一些常用日本礼貌用语，可以给他人留下一个好印象。他们做事的条条框框也比较多，可以提前熟悉，给自己一个比较好的体验。比如说：日本人走路会固定走某一侧，记得留意脚下的方向标志；在自动扶梯上记得空出右边的一条通路给赶时间的人行走；用完餐起身之前说一句「ご馳走樣でした。」表示对厨师的感谢；需要其他人帮忙的时候私密马赛一下绝对没有错。最重要的一点是，注意日本店铺的营业时间：许多（不是全部）店铺10点才开门（石井商店是11点），而晚上6点（比如说直岛上的餐厅）~8点就已经关门了；如果需要吃早餐，可以去随处可见的711、全家福超市（巡礼的体力消耗不小，建议不要忘记吃早餐）。</p><h2><span id="结语">结语</span></h2><p>祝愿读到这篇专栏的人能够从中获取一些有用的信息，可以在鸟白岛找到探求之物、找到自己、找到想做的事!</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文搬运自本人的b站专栏。&lt;/p&gt;
&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;今天是2024年7月26日。本人刚刚从日本返回中国，总计在日本停留了九天，其中前三天在高松（包括男木岛、女木岛、直岛）度过。决定写一篇专栏来记录我的第一次巡礼之旅。这是一场身体很累，但心灵却得到治愈的旅途。在这之中，我收获了许多意外的惊喜。&lt;/p&gt;</summary>
    
    
    
    <category term="anitabi" scheme="https://tsumugivolle77.github.io/categories/anitabi/"/>
    
    
    <category term="Summer Pockets" scheme="https://tsumugivolle77.github.io/tags/Summer-Pockets/"/>
    
    <category term="travel" scheme="https://tsumugivolle77.github.io/tags/travel/"/>
    
  </entry>
  
</feed>
